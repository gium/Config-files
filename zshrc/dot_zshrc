# zshrc -- Guillaume Sadegh					 -*- sh -*-

# Couleurs.

BLACK="[30m"
RED="[31m"
GREEN="[32m"
YELLOW="[33m"
BLUE="[34m"
MAGENTA="[35m"
CYAN="[36m"
WHITE="[37m"
BOLD="[01m"
NORMAL="[00m"

# Les alias

 # Use GNU coreutils

if [ x"`which gls | grep -v 'not found'`" != x ]; then
    LS=gls
else
    LS=ls
fi

if [ x"`which gmv | grep -v 'not found'`" != x ]; then
    MV=gmv
else
    MV=mv
fi

if [ x"`which gcp | grep -v 'not found'`" != x ]; then
    CP=gcp
else
    CP=cp
fi

if [ x"`which grm | grep -v 'not found'`" != x ]; then
    RM=grm
else
    RM=rm
fi

if [ x"`which gdf | grep -v 'not found'`" != x ]; then
    DF=gdf
else
    DF=df
fi

if [ x"`which gdu | grep -v 'not found'`" != x ]; then
    DU=gdu
else
    DU=du
fi

alias ls="${LS} --color=auto --human-readable"
alias l="${LS} --color=auto"
alias ll="${LS} -l --color=auto"
alias la="${LS} -a --color=auto"
alias lla="${LS} -la --color=auto"
alias md='sudo mount /dev/sdb1 /media/disk1'
alias msd='sudo mount -t vfat /dev/mmcblk0p1 /media/sdcard'
alias md2='sudo mount /dev/sdb5 /media/disk2'
alias umd='sudo umount /media/disk1'
alias umd2='sudo umount /media/disk2'
alias umsd='sudo umount /media/sdcard'
alias mpcn='mpc next'
alias mpcs='mpc stop'
alias mpcp='mpc play'
alias mpcv='mpc volume'
alias open='xdg-open'
alias makej='make -j 2'
alias cp="${CP} --interactive"
alias mv="${MV} --interactive"
alias rm="${RM} --interactive"
alias svn='~/svn-wrapper.sh'
alias c='clear'
alias s='cd ..'
alias df="${DF} --human-readable"
alias du="${DU} --human-readable"
alias sshepi='ssh sadegh_g@ssh.epita.fr'
alias sshsb='ssh sadegh-beyki.com'
alias sshdiscut='ssh discut@sunshinro.com -p 42'
alias sshlrde='ssh sadegh@kualalumpur.lrde.epita.fr'
alias sshjussieu='ssh 2600875@ssh.ufr-info-p6.jussieu.fr'
alias gofilm='cd /media/sda6/Torrent/incoming'
alias mountkey='sudo mount -t vfat /dev/sdb1 /media/GS_KEY'
alias umountkey='sudo umount /media/GS_KEY'
alias mounthd2='sudo mount /dev/sdb5 /media/GS_KEY'
alias miniproj='cd ~/miniproj/'
alias connect='~/nethome.sh'
alias home='~/nethome.sh'
alias lock=xtrlock
alias propset="svn propset 'svn:keywords' Id *.[ch]"
alias mplayer='mplayer -subfont-text-scale 3'
alias mc='make clean all'
alias netstart='sudo /etc/init.d/networking restart'
alias vpnepita='sudo pon VPNEPITA'
alias vpnepitadebug='sudo pon VPNEPITA debug dump logfd 2 nodetach'
alias wifiepita='sudo wpa_supplicant -Dwext -iwlan1 -c /etc/wpa_supplicant.conf'
alias grep='grep --color=auto'
alias ...='../..'
alias right='find . -type f -exec chmod 644 {} \; && find . -type d -exec chmod 755 {} \;'
alias windows='qemu -m 384 -localtime -usb -usbdevice tablet  -net nic   -soundhw all /media/sda6/windows.img'
alias win=windows

# Variables d'environnement

export LESS='--RAW-CONTROL-CHARS --tabs=8 -R'
export LESSOPEN='| /usr/bin/lesspipe %s'
export LESSOPEN="|/usr/local/bin/lesspipe.sh %s"
export LESSCLOSE='/usr/bin/lesspipe %s %s'
export LESSCHARSET="utf-8"
export FULLNAME="Guillaume SADEGH"
export EMAIL="guillaume.sadegh@lrde.epita.fr"
export JAVA_HOME=/usr/lib/jvm/java-6-sun
export CFLAGS="-W -Wall"
export CXXFLAGS="-W -Wall"
export LD_LIBRARY_PATH="/usr/local/lib"
export PAGER=/usr/bin/less
export READNULLCMD=${PAGER:-/usr/bin/less}
export PERLLIB='/usr/share/perl5:/usr/lib/perl5'
export NNTPSERVER=news.epita.fr
export EDITOR=emacs
[[ -r $HOME/.socks ]] && export SOCKS5_PASSWD=$(cat $HOME/.socks)

PATH="$PATH:/opt/Adobe/Reader8/bin:/home/guillaume/lrde/Spin/Src5.1.3/:/opt/intel/Compiler/11.0/083/bin/ia32:/home/guillaume/bin:/home/guillaume/chrome-linux"
# /opt/intel/cc/10.1.018/bin

# Git

# ----------------------------------------------------------------------
# The following implements a caching mechanism for git information.
# The RPROMPT executes get_git_bprompt_info() and include the output...
#
#   setopt prompt_subst
#   RPROMPT="$(get_git_prompt_info)"
#
export __ZSH_GIT_DIR=
export __ZSH_GIT_BRANCH=
export __ZSH_GIT_STATE=
export __ZSH_GIT_VARS_INVALID=1

# get the name of the branch we are on
parse_git_branch()
{
    git branch --no-color 2> /dev/null | sed -e \
        '/^[^*]/d' -e 's/* \(.*\)/(\1) -- /'
}

# http://blog.madism.org/index.php/2008/05/07/173-git-prompt
new_parse_git_branch()
{
    local git_dir branch

    psvar=()
    git_dir=$(git rev-parse --git-dir 2> /dev/null) || return

    # rewritten by Thomas Ritz <thomas(at)galaxy-ritz(dot)de>
    if test -d "$git_dir/rebase-apply"; then
        if test -f "$git_dir/rebase-apply/rebasing"; then
            __ZSH_GIT_STATE="rebase"
        elif test -f "$git_dir/rebase-apply/applying"; then
            __ZSH_GIT_STATE="am"
        else
            __ZSH_GIT_STATE="am/rebase"
        fi
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    elif test -f "$git_dir/rebase-merge/interactive"; then
        __ZSH_GIT_STATE="rebase -i"
        branch="$(cat "$git_dir/rebase-merge/head-name")"
    elif test -d "$git_dir/rebase-merge"; then
        __ZSH_GIT_STATE="rebase -m"
        branch="$(cat "$git_dir/rebase-merge/head-name")"
    elif test -f "$git_dir/MERGE_HEAD"; then
        __ZSH_GIT_STATE="merge"
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    else
        test -f "$git_dir/BISECT_LOG" && __ZSH_GIT_STATE="bisect"
        branch="$(git symbolic-ref HEAD 2>/dev/null)" || \
            branch="$(git describe --exact-match HEAD 2>/dev/null)" || \
            branch="$(cut -c1-7 "$git_dir/HEAD")..."
    fi

    __ZSH_GIT_FULL_DIR=$(readlink -f ${git_dir:h})
    __ZSH_GIT_DIR="${__ZSH_GIT_FULL_DIR/$HOME/~}"
    __ZSH_GIT_BRANCH="${branch#refs/heads/}"

    export __ZSH_GIT_FULL_DIR
    export __ZSH_GIT_DIR
    export __ZSH_GIT_BRANCH
    export __ZSH_GIT_STATE
    export __ZSH_GIT_VARS_INVALID=
}


zsh_git_invalidate_vars()
{
    export __ZSH_GIT_VARS_INVALID=1
}

zsh_git_compute_vars()
{
    new_parse_git_branch
}

# on each chdir update the cached git variable(s)
preexec_functions+='zsh_git_preexec_update_vars'
chpwd_functions+='zsh_git_chpwd_update_vars'
#precmd_functions+='zsh_git_precmd_update_vars'

zsh_git_chpwd_update_vars()
{
    zsh_git_invalidate_vars
}

zsh_git_preexec_update_vars()
{
    case "$(history $HISTCMD)" in
        *git*) zsh_git_invalidate_vars ;;
    esac
}

# this function returns the current git branch
# it takes as argument a string with printf like arguments:
#   '%P'     path to top of repository
#   '%p'     path to top of repository, with s/$HOME/~/
#   '%b'     current branch
#   '%s'     state of rebase/merge/bisect/am
#   '%%'     a '%' character
# providing no arguments is equivalent to "%p %b %s".
get_git_prompt_info()
{
    test -n "$__ZSH_GIT_VARS_INVALID" && zsh_git_compute_vars
    test -n "$__ZSH_GIT_DIR" || return

    local def fmt res
    def='%p %b %s'
    fmt=$@
    res=${fmt:-$def}
    res=${res//\%P/$__ZSH_GIT_FULL_DIR }
    res=${res//\%p/$__ZSH_GIT_DIR }
    res=${res//\%b/$__ZSH_GIT_BRANCH }

    local state="$__ZSH_GIT_STATE"
    if test -n "$state" ; then
        state="$state "
#
# NOTE: This code take a long time to execute on large repos,
#       but can show if the repo is dirty or not.  It cannot be
#       cached because it's too hard to figure out which commands
#       change this state.  Enable it if you work on only small
#       repositories.
#
        #elif ! git diff --quiet ; then
        #        state="dirty "
    fi
    res=${res//\%s/$state}

    res=${res//\%%/%}

    echo -n "${res}"
}

get_git_branch()
{
    res=$(get_git_prompt_info '%b')

    if [ "$res" = "" ]
    then
        echo -n ""
    else
        echo -n " ${res}"
    fi
}

# Prompt

if [ "`id -u`" -eq 0 ]; then
  export PS1="%{[34m%}%U%n%u%{[36m%}@%m%{[1;34m%}:%{[00;33;34m%}%~%{[0m%}#"
else
  export PS1="%{[34m%}%U%n%u%{[36m%}@%m%{[1;34m%}:%{[00;33;34m%}%~%{[0m%}$"
fi
export RPS1=$'%(?..%{[31m%}[%?]%{\e[0m%} )%{[35m%}%D{%A %T}%{\e[0m%}'

# Touches

bindkey ''    beginning-of-line       # Home
bindkey ''    end-of-line             # End
bindkey ''    delete-char             # Del
bindkey ' ' overwrite-mode          # Insert
bindkey '[5~' history-search-backward # PgUp
bindkey '[6~' history-search-forward  # PgDn
bindkey 'Ã¤' delete-word # M-d
bindkey 'Ã´' transpose-words # M-t

 # .... => ../../../../ lors de l'Ã©criture
rationalise-dot() {
  if [[ $LBUFFER = *.. ]]; then
    LBUFFER+=/..
  else
    LBUFFER+=.
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

# Gestion de la couleur pour 'ls' (exportation de LS_COLORS)
if [ -x /usr/bin/dircolors ]; then
    [ -r /etc/dir_colors ] && eval "`dircolors /etc/dir_colors`"
    [ -r ~/.dir_colors ] && eval "`dircolors ~/.dir_colors`"
fi

# Options
# man zshoptions

setopt auto_cd
setopt auto_list
setopt auto_param_keys
setopt auto_param_slash
setopt auto_pushd
setopt auto_remove_slash
unsetopt beep
unsetopt bg_nice
setopt chase_links
unsetopt clobber
setopt complete_aliases
setopt complete_in_word
setopt correct
setopt equals
setopt extended_history
setopt extended_glob
setopt glob_dots
setopt hash_cmds
setopt hash_dirs
setopt hist_verify
setopt hist_ignore_dups
setopt hist_ignore_space
unsetopt hup
unsetopt ignore_eof
unsetopt list_ambiguous
unsetopt list_beep
setopt mail_warning
setopt magic_equal_subst
setopt no_bg_nice
setopt numericglobsort
setopt print_exit_value
setopt pushd_ignore_dups
setopt pushd_silent
setopt pushd_to_home
unsetopt rm_star_silent

# ParamÃ¨tres de l'historique des commandes

export HISTORY=100
export SAVEHIST=100
export HISTFILE=$HOME/.history

# ComplÃ©tion

zstyle ':completion:*' use-compctl false
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _match _approximate _prefix
zstyle ':completion:*' format '-=> %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'l:|=* r:|=*' 'r:|[._-]=* r:|=*'
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' menu select=5
zstyle ':completion:*' original true
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' verbose true
zstyle ':completion:*:processes' list-colors '=(#b)(?????)(#B)?????????????????????????????????([^ ]#/)#(#b)([^ /]#)*=00=01;31=01;33'
zstyle :compinstall filename '~/.zshrc.comp'
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
			     /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:history-words:*'  verbose yes
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list yes
zstyle ':completion:*:history-words' menu yes

# Zen
if [ -d /home/guillaume/.zen ]; then
    fpath=(
        $fpath
        /home/guillaume/.zen/zsh/scripts
        /home/guillaume/.zen/zsh/zle )
    autoload -U zen
fi

# autoload builtin

autoload mere zed zfinit
autoload -U zmv
zmodload zsh/complist
autoload -U ~/.zsh_comp/*(:t)
autoload -U compinit
compinit

# Custom functions

my_pkill ()
{
    [ "x" = "x$1" ] && (echo "missing arg"; exit 1)
    ps aux | grep "$1" | tr -s " " | cut -d' ' -f2 | xargs kill -9
}

my_dotty ()
{
    TMP=$(mktemp)
    cat > "${TMP}.dot"
    dot -Tpng -o "${TMP}.png" "${TMP}.dot"
    xzgv "${TMP}.png"
}

weather ()
{
    wget 'http://xoap.weather.com/weather/local/'"$1"'?cc=*&link=xoap&prod=xoap&par=1168658022&unit=m&key=8a9cf7b11f89c65a&unit=m' -O - -o /dev/null | awk 'BEGIN {seen=0;} (/<cc>/) {seen=1;} (seen) {print; if (/<t>/) {exit;} } '  | sed 'N;N;N;N;N;s+.*<obst>\(.*\)</obst>.*<tmp>\(.*\)</tmp>.*<t>\(.*\)</t>.*+\1: \2Â°C (\3)+;s+[,/].*:+:+'
}

weather_paris ()
{
    weather FRXX0076
}

weather_madrid ()
{
    weather SPXX0050
}

# Load .login

if [ -f ~/.login ]; then
    source ~/.login
else
    xset b off
    xset r rate 300 100
fi
bindkey Ã¿ backward-delete-word
bindkey ";5D" backward-word
bindkey ";5C" foreward-word
bindkey ";5C" forward-word
bindkey ";3C" forward-word
bindkey ";3D" backward-word
